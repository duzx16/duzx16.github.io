<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhengxiao Du</title>
    <link>https://zxdu.xyz/</link>
      <atom:link href="https://zxdu.xyz/index.xml" rel="self" type="application/rss+xml" />
    <description>Zhengxiao Du</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 03 Dec 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://zxdu.xyz/media/icon_hu201e1a72013825f24e615b24fa4a82e9_325334_512x512_fill_lanczos_center_3.png</url>
      <title>Zhengxiao Du</title>
      <link>https://zxdu.xyz/</link>
    </image>
    
    <item>
      <title>GLM-4-Voice: Towards Intelligent and Human-Like End-to-End Spoken Chatbot</title>
      <link>https://zxdu.xyz/publication/glm-4-voice/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/glm-4-voice/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scaling Speech-Text Pre-training with Synthetic Interleaved Data</title>
      <link>https://zxdu.xyz/publication/iclr-25/</link>
      <pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/iclr-25/</guid>
      <description></description>
    </item>
    
    <item>
      <title>从零学习 Vector Quantization</title>
      <link>https://zxdu.xyz/post/vector-quantize/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0800</pubDate>
      <guid>https://zxdu.xyz/post/vector-quantize/</guid>
      <description>&lt;p&gt;最近因为研究需要学习了 vector quantization（VQ）并且实际训练了一些带有 VQ bottleneck 的模型。在这里记录一下学习和训练的心得。&lt;/p&gt;
&lt;h2 id=&#34;什么是-vq&#34;&gt;什么是 VQ&lt;/h2&gt;
&lt;p&gt;我们知道神经网络强大的表示能力很大程度上来自于其使用的连续向量表示，以及依赖于连续向量表示的梯度下降优化算法。而 vector quantization 则是将神经网络中某一层的连续向量表示替换为离散变量。具体方式为有一个词表（codebook） $e\in R^{K\times D}$，其中$K$ 是词表大小，$D$ 是向量维度。对于神经网络中某一层的输出 $z\in R^{D}$，我们希望找到一个词表中的向量 $e_i$ 使得 $e_i$ 与 $z$ 的距离最小，即 $i = \arg\min_j |x - e_j|_2$。这样，我们就可以将 $e_i$ 作为 $z$ 的近似，称为 $z_q$，继续参与后面的运算。这种替换方式可以看作是一种量化（quantization）操作，因此得名 vector quantization。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要-vq&#34;&gt;为什么需要 VQ&lt;/h2&gt;
&lt;p&gt;VQ 最为知名的应用就是 VQVAE，常常被用于将原始图片编码为离散的 token 序列。但是实际上 VQ 可以用于任何神经网络中，并不局限于 AutoEncoder。&lt;/p&gt;
&lt;p&gt;VQ 可以看作是 Transformer 中 embedding 层的逆运算。Embedding 层的作用就是将神经网络不好处理的离散变量转化为连续向量表示，为什么我们还需要反过来呢？离散变量的优点在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更适合作为生成任务的目标。我们已经知道自回归 Transformer 能够很好地建模自然语言这样的离散序列。而连续向量序列，比如原始的图片、音频等，往往需要 diffusion model 这样更复杂的生成模型来建模。&lt;/li&gt;
&lt;li&gt;节省存储空间。连续变量 $z$ 需要存储 $D$ 个浮点数，而离散变量 $e_i$ 只需要存储一个整数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vq-的训练&#34;&gt;VQ 的训练&lt;/h2&gt;
&lt;p&gt;可以看出带有 VQ bottleneck 的优化并不容易。原因在于将 $z$ 转化为 $z_q$ 时存在一个 $\arg\min$ 操作，它是不可导的。&lt;/p&gt;
&lt;p&gt;为了方便，我们把神经网络在 VQ bottleneck 前的部分看作 encoder，其作用是将输入 $x$ 转化成连续向量 $z$，把 VQ bottleneck 后的部分称为 decoder，其作用是从量化后的向量 $z_q$ 中解码出需要的输出。带有 VQ bottleneck的神经网络的参数分为三部分，即 encoder 的参数 $\theta_{\text{enc}}$，decoder 的参数 $\theta_{\text{dec}}$，以及词表 $e$。decoder 的参数的优化不存在任何问题，因为它是以 $z_q$ 作为输入的，$z_q$ 是怎么来的与它无关，只需要优化神经网络原来的 loss即可。而 encoder 的参数则问题很大，因为它以 $z$ 作为输出， decoder 的梯度回传只能到 $z_q$，而 $z$ 到 $z_q$ 是不存在梯度的。在VQVAE中提出了一个近似方法，即用 $z_q$ 的梯度作为 $z$ 的梯度。原因在于两者的维度都是 $D$，并且 $z_q$ 是 $z$ 的近似，因此它们的梯度应该是相似的。给定 decoder 的输出目标 $y$，假设原来的 loss 为 $l(y, \text{Dec}(z))$，则加上 VQ bottleneck 之后的 loss 为&lt;/p&gt;
&lt;p&gt;$$
l(y,\text{Dec}(z+sg(z_q-z)))
$$&lt;/p&gt;
&lt;p&gt;其中 $sg$ 表示 stop gradient，即在 backward 的时候不计算着一部分的梯度。在 PyTorch 中实现这个近似也比较容易，只要用 &lt;code&gt;z+(z_q-z).detach()&lt;/code&gt; 替代 &lt;code&gt;z_q&lt;/code&gt; 进行后续的 forward 计算即可。&lt;/p&gt;
&lt;p&gt;通过以上方法我们优化了 encoder 和 decoder 部分，但是还没有优化 VQ 过程。VQ 过程的优化目标是使量化后的表示 $z_q$ 尽可能地接近 $z$。因此我们直接优化 $z_q$ 和 $z$ 的 mean-squared-error loss，即 $|z_q-z|_2^2$。这个 loss 可以进一步拆分为两部分，即 $|z_q-sg(z)|_2^2$ 和 $|z-sg(z_q)|_2^2$。前者使得 codebook 中离 $z$ 最近的向量进一步接近 $z$，后者使得 $z$ 进一步接近 codebook 中离它最近的向量。相对来说，我们更希望 codebook 中的向量去接近 $z$，因此前者的权重更大一些。&lt;/p&gt;
&lt;p&gt;最终我们优化的 loss 为
$$
l(y, \text{Dec}(z+sg(z_q-z)))+\alpha |z_q-sg(z)|_2^2+\beta |z-sg(z_q)|_2^2
$$&lt;/p&gt;
&lt;p&gt;在整个 loss 中，只有第二项的 loss 与 codebook 的更新有关，其实也可以直接得到一个 closed-form optimal。假设 ${z_{i,1},z_{i,2},\cdots,z_{i,n_i}}$ 为 encoder 输出中离散近似为 $e_i$ 的 $n_i$个向量，则根据 MSE loss 的性质 $e_i$ 最优解为
$$
e_i = \frac{1}{n_i}\sum_{j=1}^{n_i}z_{i,j}
$$&lt;/p&gt;
&lt;p&gt;不过实际中我们都是使用 minibatch 进行训练，在每一步优化时只能看到 batch 中的样本。因此我们使用 exponential moving average（EMA）来进行更新
$$
N_i^{(t)}=N_i^{(t-1)}&lt;em&gt;\gamma+n_i^{(t)}(1-\gamma)\
m_i^{(t)}=m_i^{(t-1)}&lt;/em&gt;\gamma+\sum_jz_{i,j}^{(t)}(1-\gamma)
$$&lt;/p&gt;
&lt;p&gt;使用EMA更新 codebook 时，loss可以改为
$$
l(y, \text{Dec}(z+sg(z_q-z))+\beta |z-sg(z_q)|_2^2
$$&lt;/p&gt;
&lt;h2 id=&#34;vq-的训练心得&#34;&gt;VQ 的训练心得&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;codebook 的初始化非常重要&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论是否使用 EMA，codebook 中都只有被激活的向量才会被更新。因此如果 codebook 中某些向量从一开始就没有激活，那么这些向量就一直不会被更新，导致使用的 codebook 大小过小。之前很多研究表明预训练模型中连续向量的分布并不是在整个欧几里得空间上均匀的，而是集中分布在一个较小的区域。因此完全随机初始化的 codebook 往往只有一小部分向量会被激活。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;超参数选择的意义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 EMA 更新的方法相当于直接计算了 codebook 最优解，收敛速度会更快。$\gamma$ 决定了 codebook 更新的速率，$\gamma$ 越小 codebook 更新越快。&lt;/p&gt;
&lt;p&gt;系数为 $\beta$ 的 loss 项其实是对 $z$ 的一个正则项。$z$ 的复杂度是由 encoder 的参数量决定的，而 $z_q$ 的复杂度是由 codebook 的大小决定的，实际中 $z$ 的复杂度一般远大于 $z_q$。如果不加约束的话 $z_q$ 永远也追不上 $z$。而用 $z_q$ 的梯度近似 $z$ 的梯度要求 $z$ 和 $z_q$ 必须非常接近。因此需要用 $\beta$ 来约束 $z$ 的复杂度。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如何防止 codebook collapse&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在学习过程中 $z$ 的分布是始终在变化中的，即使初始化的时候 codebook 中的大部分向量都能被激活，随着训练的进行，codebook 中被激活的向量也可能会越来越少。这个现象被称为 codebook collapse。通过仔细设置 $\gamma$, $\beta$ 和 学习率可以缓解这一问题，但是会非常麻烦。&lt;/p&gt;
&lt;p&gt;另一个想法是，我们可以重新初始化 codebook 中长时间没有被激活的向量，这个想法我是在 &lt;a href=&#34;http://arxiv.org/abs/2005.00341&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jukebox: A Generative Model for Music&lt;/a&gt; 中看到的。使用 EMA 更新的时候 $N_i^{(t)}$ 实际上已经记录了向量 $e_i$ 在过去被激活次数的 exponential moving average，可以用来判断有哪些向量长期没有被激活。至于如何重新初始化这些向量，我们希望重新初始化之后这些向量能够被激活，因此我们可以用当前 batch 中的 $z$ 来重新初始化这些向量。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于 MHLA（Multi-Head Latent Attention）的一些分析</title>
      <link>https://zxdu.xyz/post/mhla/</link>
      <pubDate>Thu, 09 May 2024 21:26:09 +0800</pubDate>
      <guid>https://zxdu.xyz/post/mhla/</guid>
      <description>&lt;p&gt;原始的 Multi-Head Attention 的计算公式为（单个head，暂时先不考虑 RoPE）&lt;/p&gt;
&lt;p&gt;$$
Q_i=W^Q_iH
$$&lt;/p&gt;
&lt;p&gt;$$
K_i=W_i^KH
$$
$$
V_i=W^V_iH
$$
$$
O_i=\text{Softmax}(\frac{Q_i^TK_i}{\sqrt{d_h}})V_i
$$
其中$H$ 是 $d\times l$ 的矩阵（$l$ 为序列长度），表示 hidden states， $W^Q_i, W^K_i, W^V_i$ 是 $d_h\times d$的矩阵。&lt;/p&gt;
&lt;p&gt;Multi-Query Attention 的计算公式为（单个head，暂时先不考虑 RoPE）
$$
Q_i=W^Q_iH
$$&lt;/p&gt;
&lt;p&gt;$$
K=W^KH
$$
$$
V=W^VH
$$
$$
O_i=Softmax(\frac{Q_i^TK}{\sqrt{d_h}})V_i
$$
最大的区别在于 $K,V$ 是所有 head共享的，因此能够减少KV Cache的显存占用。其中
$$
Q_i^TK=H^T(W_i^Q)^TW^KH
$$
Multi-Head Latent Attention 的计算公式为（单个head，暂时先不考虑 RoPE）
$$
C^Q=W^{DQ}H
$$
$$
Q_i=W^{UQ}_iC^Q
$$
$$
C^{KV}=W^{DKV}H
$$
$$
K_i=W_i^{UK}C^{KV}
$$
$$
V_i=W_i^{UV}C^{KV}
$$
$$
O_i=Softmax(\frac{Q_i^TK_i}{\sqrt{d_h}})V_i
$$
其中 $W^{DQ}, W^{DKV}\in \mathbb{R}^{d_c\times d}$，$W_i^{UQ},W_i^{UK},W_i^{UV}\in\mathbb{R}^{d_h\times d_c}$&lt;/p&gt;
&lt;p&gt;单独看 Attention 计算的前一部分，其中
$$
Q_i^TK_i=H^T(W^{DQ})^T(W_i^{UQ})^TW^{UK}_iW^{DKV}H
$$
令 $W_i^Q=(W_i^{UK})^TW_i^{UQ}W^{DQ}$，我们有
$$
Q_i^TK_i=H^T(W_i^Q)^TW^{DKV}H
$$
可以看到这一计算公式和 Multi-Query Attention 其实是一样的，都是使用的单独的 $Q$ 和共享的 $K$。区别在于，这里 $W_i^QH,W^{DKV}H\in\mathbb{R}^{d_c\times l}$。也就是说在进行 attention 计算的时候，向量点积的维度是 $d_c$  而不是 $d$。在论文中实际设置的是 $d_c=4d$。&lt;strong&gt;也就是说 Multi-Head Latent Attention 其实是 head dimension 提高到4倍的 Multi-Query Attention&lt;/strong&gt;。在论文中也提到了在 inference 的时候 absorb $W^{UK}$ into $W^{UQ}$，其实就代表了这里的结合方式。因为每个head的维度提高了，所以能够计算出更加复杂的 attention分布，从而相比起 Multi-Query Attention 取得性能提升。相比起直接提高 head dimension，其优点在于所有head的 $W^{DQ},W^{UQ},W^{UK}$的总参数量是 $d\cdot d_c+d \cdot d_c+ d \cdot d_c=3d\cdot d_c=12d\cdot d_h$，而所有 head 的 $W^Q$ 的参数量是 $d \cdot d_c\cdot n_h=4d^2$，节省了参数量。也就是说对 $W^Q$ 做了一个低秩分解。&lt;/p&gt;
&lt;p&gt;但是这个提升并不是 free lunch，因为 head dimension 提高意味着 attention 的计算量也提高，而 attention 的计算量是 $O(l^2)$ 的。为了处理长文本，现在大家一般都倾向于尽可能降低 attention 计算量的常数，而这个方法是会增加常数的。&lt;/p&gt;
&lt;p&gt;以上分析没有考虑 RoPE，如果考虑 RoPE 的话，每个 head 的维度会从 $4d$ 变成 $4.5d$，其中$4d$是没有 positional encoding的，$0.5d$ 是使用 RoPE encoding的。其实 ChatGLM2-6B 中已经使用过类似的&lt;a href=&#34;https://huggingface.co/THUDM/chatglm2-6b/blob/main/modeling_chatglm.py#L161&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;做法&lt;/a&gt;，即只在一半的 head dimension 上使用 RoPE ，目的是为了把 attention 计算分成位置相关和位置无关的两部分，与性能提升的关系并不大。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Emergent Abilities of Language Models from the Loss Perspective</title>
      <link>https://zxdu.xyz/publication/neurips-24/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/neurips-24/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GLM-130B: An Open Bilingual Pre-Trained Model</title>
      <link>https://zxdu.xyz/publication/glm-130b/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/glm-130b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>用Vaultwarden搭建自己的密码管理服务</title>
      <link>https://zxdu.xyz/post/bitwarden/</link>
      <pubDate>Sun, 10 Jul 2022 23:35:00 +0800</pubDate>
      <guid>https://zxdu.xyz/post/bitwarden/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;密码是我们在互联网上使用各种服务的时候很难绕过的一环。我们经常能听到各种各样的科普文章中告诫我们，为了保护好自己的互联网账号，密码一定要足够复杂，最好能把大小写字母、数字、特殊符号都用上。但是，复杂的密码意味着难以记忆，而当下一个普通的互联网用户很可能拥有几十个账户。为了不折磨自己的脑细胞，很多人选择给多个账户使用同一个密码。然而，由于有的网站在数据安全方面疏于防护，用户的密码遭到泄漏的事故时有发生。虽然这些密码遭到泄漏的账户可能没有很高的价值，但是却可能导致使用了同样密码的高价值账户被盗。此外，有的人还在创建复杂密码的时候还会使用自己的姓名缩写、生日、手机号等信息，这也为通过社会工程学手段破解密码提供了可能。&lt;/p&gt;
&lt;p&gt;为了解决这一问题，密码管理服务应运而生。密码管理服务为用户提供了存储互联网账户的用户名和密码的服务，往往还会和浏览器、手机操作系统等结合，提供自动填充、自动记录等功能。在安全性方面，无论是存储在本地还是云端，都会用用户设置的密码进行加密。有了密码管理服务，我们就可以给每个互联网账户使用随机生成的强密码。最常见的密码管理服务就是Chrome、Edge等浏览器自带的密码自动填充功能和iOS、MacOS提供的系统级密码管理。我之前使用的也是Chrome的自动填充功能，但是这个功能毕竟是绑定了Chrome浏览器和谷歌账号。这就限制了浏览器的选择，比如前段时间使用Chromium内核的Edge很火，但是因为自己的互联网账号密码都保存在Chrome上，所以无法尝试。类似的，苹果的密码管理服务也不方便在Windows和Android下使用。因此我最近决定迁移到相对独立的密码管理软件上。&lt;/p&gt;
&lt;h2 id=&#34;为什么选择bitwarden&#34;&gt;为什么选择BitWarden&lt;/h2&gt;
&lt;p&gt;密码管理服务的安全性来自于现代加密算法，在无法攻破加密密码的情况下是无法获得加密内容的。但是为了能够在不同的设备上使用保管的密码，我们必须依赖于云端服务。而一旦涉及到云服务，就存在着很大的不确定性，因为我们很难检查服务器上实际运行的代码。这也是我没有选择很热门的1Password的原因。&lt;/p&gt;
&lt;p&gt;BitWarden是前后端均开源的密码管理服务器，并且还支持由用户自己搭建后端服务。当然实际中大家使用更多的是&lt;a href=&#34;https://github.com/dani-garcia/vaultwarden&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vaultwarden&lt;/a&gt;（原名为BitWarden_RS）这个非官方简化版后端实现，因为它占用的资源更少。同时BitWarden的前端也有很好的跨平台支持，对主流的浏览器和操作系统都提供了支持。&lt;/p&gt;
&lt;h2 id=&#34;如何搭建自己的vaultwarden服务&#34;&gt;如何搭建自己的Vaultwarden服务&lt;/h2&gt;
&lt;p&gt;首先用docker容器运行Vaultwarden服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir /vw-data &lt;span class=&#34;c1&#34;&gt;# this is used for permanent data storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name vaultwarden &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;WEBSOCKET_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -v /vw-data/:/data/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -p 10020:80 -p 3012:3012 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中10020和3012分别是主服务和WebSocket服务的端口，&lt;code&gt;/vw-data&lt;/code&gt;是用来保存数据的文件夹。&lt;/p&gt;
&lt;p&gt;然后在域名服务商的管理页面添加DNS记录，将准备的域名指向服务器的IP地址。作为例子，这里假设我们准备的域名是www.example.com，服务器的IP是1.1.1.1。&lt;/p&gt;
&lt;p&gt;然后安装certbot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apt-get install -y snapd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snap install core&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; sudo snap refresh core
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snap install --classic certbot
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -s /snap/bin/certbot /usr/bin/certbo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用certbot进行证书生成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://github.com/joohoi/acme-dns-certbot-joohoi/raw/master/acme-dns-auth.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x acme-dns-auth.py &lt;span class=&#34;c1&#34;&gt;# 注意要更改acme-dns-auth.py的首行的python为python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mv acme-dns-auth.py /etc/letsencrypt/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;certbot certonly --manual --manual-auth-hook /etc/letsencrypt/acme-dns-auth.py --preferred-challenges dns --debug-challenges -d &lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;.www.example.com -d www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在最后一步会要求你在域名的DNS配置中添加一个CNAME项来认证你的所有权，完成之后等待DNS更新之后按下回车。如果还没有更新完成就回车的话认证会失败，可以重新运行这一命令。证书相关的文件保存在&lt;code&gt;/etc/letsencrypt/live/www.example.com&lt;/code&gt;下面。&lt;/p&gt;
&lt;p&gt;最后在&lt;code&gt;/etc/nginx/conf.d/vaultwarden.conf&lt;/code&gt;中进行nginx配置（需要先安装nginx）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Redirect HTTP to HTTPS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    listen 80;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    listen [::]:80;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server_name www.example.com;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return 301 https://$host$request_uri;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  listen 443 ssl http2;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  listen [::]:443 ssl http2;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  server_name www.example.com;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ssl_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ssl_certificate_key /etc/letsencrypt/live/www.example.com/privkey.pem;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  # Specify SSL config if using a shared one.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  #include conf.d/ssl/ssl.conf;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  # Allow large attachments
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  client_max_body_size 128M;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  location / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_pass http://127.0.0.1:10020;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header Host $host;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header X-Real-IP $remote_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header X-Forwarded-Proto $scheme;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  location /notifications/hub {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_pass http://127.0.0.1:3012;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header Upgrade $http_upgrade;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_set_header Connection &amp;#34;upgrade&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  location /notifications/hub/negotiate {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy_pass http://127.0.0.1:10020;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以在www.example.com中访问自己的BitWarden服务了。在使用各个平台的BitWarden插件和客户端的时候，要在登陆之前先进行设置，将服务地址修改为www.example.com。&lt;/p&gt;
&lt;h2 id=&#34;更新vaultwarden镜像&#34;&gt;更新Vaultwarden镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Pull the latest version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Stop and remove the old container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker stop vaultwarden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker rm vaultwarden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Start new container with the data mounted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name vaultwarden &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;WEBSOCKET_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -v /vw-data/:/data/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -p 10020:80 -p 3012:3012 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Installing Vaultwarden formally bitwarden_rs on Ubuntu 20.04 with Nginx. &lt;a href=&#34;https://www.llewellynhughes.co.uk/post/installing-vaultwarden&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.llewellynhughes.co.uk/post/installing-vaultwarden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vaultwarden Wiki. &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dani-garcia/vaultwarden/wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>GLM: General Language Model Pretraining with Autoregressive Blank Infilling</title>
      <link>https://zxdu.xyz/publication/glm-21/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/glm-21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>P-Tuning: Prompt Tuning Can Be Comparable to Fine-tuning Across Scales and Tasks</title>
      <link>https://zxdu.xyz/publication/p-tuning-v2/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/p-tuning-v2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CogKR: Cognitive Graph for Multi-hop Knowledge Reasoning</title>
      <link>https://zxdu.xyz/publication/cogkr-19/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/cogkr-19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Policy-Gradient Training of Fair and Unbiased Ranking Functions</title>
      <link>https://zxdu.xyz/publication/fair-19/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/fair-19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GPT Understands, Too</title>
      <link>https://zxdu.xyz/publication/p-tuning/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/p-tuning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>读书感想：《哈利波特与理性之道》</title>
      <link>https://zxdu.xyz/post/report-hpmor/</link>
      <pubDate>Sat, 22 Feb 2020 21:26:09 +0800</pubDate>
      <guid>https://zxdu.xyz/post/report-hpmor/</guid>
      <description>&lt;p&gt;为了记录自己最近看的书决定开两个专栏，一个是读书笔记，用来记录偏技术性的读书总结，一个是读书感想，用来发表非技术性的读书体会。本篇比较接近一篇安利贴。&lt;/p&gt;
&lt;p&gt;这是一本《哈利波特》的同人小说。《哈利波特》的原著是我阅读次数最多的小说之一，当然都是在初中时期看的。我觉得这也是比较容易欣赏这本同人的要求：对原著小说有一定的了解，&lt;em&gt;但是又没有热爱到不允许出现任何和原著不符的情节和人物&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;当下大部分的《哈利波特》同人无外乎是两种类型，一种是把自己当成原著剧情的补充和扩展，专注于原著主线之外的情节和人物关系；另一种则是只保留原著的世界观，但是讲述完全不同的故事，甚至连主人公都变了（《舌尖上的霍格沃滋》）。而本书则恰好介于两者之间：本书的剧情完全基于原著第一部《魔法石》，没有引入任何新的人物，但是整个情节发展却完全不同。不同在于，如果说原著小说是给儿童的童话故事，而本书则是给成年人的奇幻小说。&lt;/p&gt;
&lt;h3 id=&#34;用理性精神探索魔法世界&#34;&gt;用理性精神探索魔法世界&lt;/h3&gt;
&lt;p&gt;本书的世界线与原著的最明显不同在于，由于某些原因，哈利的姨妈并没有嫁给德思礼，而是嫁给了牛津大学的物理学教授万瑞斯。哈利从小就收到了万瑞斯教授的呵护和教育，收到了良好的理性精神和科学方法的训练。而在他十一岁的时候，他像原著一样收到了猫头鹰寄来的霍格沃滋的录取通知书。就这样，一个有着科学家头脑的男孩走入了充满不合理的魔法世界。&lt;/p&gt;
&lt;p&gt;因为这种科学世界观被魔法世界冲击的感受，本书带上了浓厚的科幻色彩。当哈利见到麦格教授在他面前变成一只猫时，他因为能量守恒被打破和猫的大脑居然能承载人的思想而跳了起来。值得注意的是，本书并没有强行用现有的科学知识去解释魔法，而是很快承认了魔法的存在打破了现有的科学定理。但是，虽然已有的知识被打破了，但是发现这些知识的方法却没有失效。哈利的人生理想很快变成了用科学的方法论来探索魔法的原理，从而实现自己改造世界的目标。&lt;/p&gt;
&lt;p&gt;在哈利不断接触魔法世界的过程中，作者也为原著中稍显不合理的设定增加了更为自洽和合理的解释。这一类情节的高峰就是时间转换器的相关情节。对原著比较了解的人都知道，时间转换器是原文中非常严重的一个bug。它的能力过于强大，以至于罗琳也不得不在第五部将它们全部毁掉。时间转换器涉及的是科幻小说中一个经典的主题：回到过去。这里作者采用的是“时间线唯一且过去不可改变”的设定，即不存在平行宇宙，并且回到过去无法改变过去。未来的人回到过去的所作所为构成了过去的一部分。如哈利所说，这意味着整个世界是一个超图灵机，因为当下的计算可以利用来自未来的信息。这一设定可谓科幻味十足，并且充满了可利用的空间。对于未来的自己来说，已经知道的事实是无法改变的，但是还不知道的事实却可以回到过去加以影响。因此只要自己不知道某个人是否已经知道了某条信息，就可以利用时间转换器回到过去，将这条信息告诉他/她。&lt;/p&gt;
&lt;p&gt;对于受过科学训练的人来说，另一个剧情上的吸引力在于用科学方法去探索和解释未知世界。这一类情节的高峰同样是关于时间转换器。当得知关于时间转换器的上述设定之后，哈利立刻意识到，这种超图灵机结构完全可以被用来构建解决NP问题的高效算法。于是他进行了如下实验：请一个朋友随机选择100-999之间的两个质数，将两者的乘积告诉自己。然后自己回到房间，捡起未来的自己写给自己的纸条（称为纸1）。然后从笔记本上撕下一张纸（称为纸2）。根据纸1的内容在纸2上书写。如果纸1为空，则在纸一上写下“100 100”。否则将纸1上的两个数字相乘，如果乘积与之前的乘积相同，则将两个数字写在纸2上。否则将第一个数字加1，如果第一个数字超过999，则重置为1000，并将第二个数字加1。然后用时间转换器将纸2送回过去的房间，成为纸1。可以看出，唯一能够自洽的时间线就是纸1和纸2上都是当初选择的两个质数。这实际上就成了分解因数的一个多项式时间的算法。而分解因数一直被认为是NP问题。如果你对计算机比较了解的话，这一段剧情完全可以让你达到颅内高潮。顺便一提，这个实验的结局是，哈利在纸1上看到了自己的字迹写的“不要和时间开玩笑”，然后用颤抖的手抄到了纸2上。&lt;/p&gt;
&lt;h3 id=&#34;扎根原著又超越原著的人物设定&#34;&gt;扎根原著又超越原著的人物设定&lt;/h3&gt;
&lt;p&gt;虽然本书的时间线仅仅是原著第一部，但是作者将七本书的元素和人物都已经提前融了进去（毕竟在第一年末尾主角就打败伏地魔了）。这些出场的人物大部分都符合原著，比如海格、麦格、斯内普。而有的人物相比原著却做了大幅度修改。这其中最明显的一个是主角哈利，相比起原著中和他爸爸一样有点鲁莽的哈利·波特，这个哈利·万瑞斯要更加聪明。但是如果你又不得不承认，原著中哈利的天性如果在一个知识分子家庭中成长，最终得到的就是这样一个角色。&lt;/p&gt;
&lt;p&gt;而彻底推翻原著设定的则是大反派伏地魔。原著中的伏地魔是一个只能存在于童话中的反派。他没有自己的理想，除了搞恐怖活动之外他的食死徒群体没有目标。而且以原著中魔法部的禁戒疏散，伏地魔这样不择手段的反派早就应该控制了整个魔法部（只需要对几个高级官员施展摄魂咒）。没有目标则是更大的问题。本书中的汤姆·里德尔则是现实中邪恶人物的极端化。他的邪恶在于他没有任何的同理心，因此他的行为并不是为了享受作恶的快乐，而仅仅是为了达成他的目标。和本书中的哈利一样，他对于死亡有极大的恐惧和厌恶。但是因为缺乏同理心，所以他只想避免自己的死亡，而对他人的死亡无动于衷。为了达成永生的目标，他制作了难以计数的魂器，甚至把其中之一跟着先驱者11号发射到了太阳系外。而且他有充分的智商去制定一个低成本的征服魔法界的计划。他原本打算建立一个大反派人设来吸引魔法界的仇恨，然后再建立一个正义人设来打败自己，从而像邓布利多打败格林德沃一样获得最高的权力和威望。但是没想到整个魔法界在对抗反派人设“伏地魔”的过程中，不断地拖正派人设“大卫·门罗”的后腿，而食死徒的事业则不断高歌猛进。汤姆·里德尔最终忍无可忍，决定用反派人设车翻全世界。&lt;/p&gt;
&lt;p&gt;另外值得一提的是邓布利多。邓布利多是本书中除了哈利和伏地魔之外唯一的聪明人（麦格教授、阿米莉亚·博恩斯、斯内普等人能算半个）。这可能是本书的一个缺陷，但是如果我们坚持原著中的某些设定（魔法部门口没有任何反复方汤剂的措施，霍格沃滋在神秘人归来随时可能发起袭击的时候还在鼓励学院之间竞争学院杯），你就不得不承认魔法世界中的大部分人都蠢得无可救药。但是和哈利和伏地魔的聪明不同，邓布利多表现出来的更像是睿智。他能够比他们两个都看得更加深远。当哈利和奇洛教授还在欣喜于通过麻瓜技术改进的飞天扫帚从傲罗包围中逃走时，邓布利多已经看到了麻瓜的科技被引入巫师战争中的毁灭性后果。正是这种远见使得邓布利多超越了伏地魔。伏地魔被邓布利多有意泄漏的预言牵着鼻子走，而邓布利多却能操纵预言来达成自己想要的未来。&lt;/p&gt;
&lt;h3 id=&#34;科幻小说般的精神内核&#34;&gt;科幻小说般的精神内核&lt;/h3&gt;
&lt;p&gt;在第一部分我只是将这本书形容为“带有科幻色彩”，因为本书很难符合一般的科幻小说的定义，因为它既不指向未来，也不描述科技。但是在世界观上，这本书与科幻小说还是表现出了许多相似。作者对魔法的思考一开始就放在了宇宙的尺度下，哈利与奇洛教授真正成为朋友是在奇洛教授用魔法带他体会身处太空的景象。在哈利对魔法本质的探索中，作者也暗示了一种非常科幻的魔法起源：曾经有一个非常强大的文明（亚特兰蒂斯）用难以想象的科技建造了一个自动化的辅助系统。这个系统有一系列实现功能的指令（咒语）。同时这个系统只会听从具有亚特兰蒂斯基因的人（巫师）。&lt;/p&gt;
&lt;p&gt;比这更深一层的是，这本书具有典型的科幻小说的精神内核。奇幻小说的精神内核往往是今不如古，格兰芬多的宝剑、死亡三圣器都是古人制造的威力巨大的魔法物品，今人却再也没有能力制造了。瓦雷利亚人曾经拥有成批的巨龙和大量生产瓦雷利亚钢的能力，今人仅仅是靠着瓦雷利亚文明的少许遗留。威胁中土的恐怖阴影索伦也不过是古代的魔王魔苟斯的爪牙。本书建立在《哈利波特》的世界观下，也不得不承认魔法的力量正在消退这一事实。但是哈利却丝毫没有因此而沮丧。他相信用科学方法来研究魔法能够找到魔法的底层原理。即使魔法衰退了，建立在新的原理上的科技也能把人类带向更美好的未来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;“好吧，”德拉科说道。他深吸了一口气，声音变得略微低沉，开始抑扬顿挫地演讲。“麻瓜出身的巫师污染了魔法世界，令我们的魔力越来越弱，一代不如一代。曾经萨拉查·斯莱特林和戈德里克·格兰芬多和罗依纳·拉文克劳和赫尔加·赫奇帕奇以他们的力量创建了霍格沃茨，制造了挂坠盒，宝剑，王冠，圣杯这样的魔法宝物，近代的巫师没有一个人能和他们比肩。我们正在变弱，在往麻瓜的方向退化，因为我们和麻瓜出身的人通婚，让没有魔力的哑炮（squib)孩子活下来。如果任这样的污染继续的话，很快我们的魔杖就会折断，我们的艺术就会失传，梅林的传人就会灭绝，亚特兰帝斯的血脉就会从此沉沦。我们的孩子们会像麻瓜们一样在尘埃里刨食，黑暗会永远笼罩这个世界。”德拉科喝了一口茶，看上去很满意；看起来，这就是他的整个的论点了。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;“很有说服力，”哈利说，不过他指的是修辞手段，不是内容。这是一个标准的模式：光荣的时代的堕落，为了保护仅存的珍贵部分必须保持纯洁，抗拒污染，过去是上坡路而未来是下坡路。而这个模式也有它的天敌…“不过我必须纠正一个事实。你关于麻瓜的信息有点过时了。我们已经不再在灰尘里刨食了。”
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;德拉科猛地回过头。“什么？你什么意思，我们？”
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;“我们。我们科学家。弗兰西斯·培根的传人和启蒙运动的血脉。麻瓜们没有呆坐着哭诉没有魔杖的悲哀，我们有我们自己的力量，有没有魔法都没关系。如果你们的力量消失了，对我们大家都是巨大的损失，因为对于我们来说，你们的魔法是指向这个世界的真正规则的唯一线索——但是你们不会在灰尘里刨食的。你们的房子还是会冬暖夏凉，你们还是会有医生和药物。如果魔法失传了，科学会让你活下去。那会是个悲剧，但决不会是世界的光芒熄灭的时刻。我是这么认为的。”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然还有我认为本书的高光时刻，哈利面对死亡的化身摄魂怪（本书设定），说出了那段代表未来人类的宣言&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我知道你是什么了，哈利想道，魔杖转动了一次，两次，三次，四次，手指滑过了精确的距离，我理解了你的本质，你是死亡的象征，是死亡通过某种魔法规则在这个世界上投下的阴影。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;而死亡是我永远不会接受的事情。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;它只是年少时的无奈，人类只是还没有完全长大。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;有一天……
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我们会摆脱它……
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;大家就再也不用互相说再见……
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;魔杖举了起来，直指摄魂怪。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;“呼神护卫！”
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这个想法像决了堤的洪水一样喷薄而出，沿着手臂涌向他的魔杖，杖头迸发出耀眼的白光…… 光芒成形了，产生了形状和物质。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;一个拥有两条胳膊，两条腿，一个头颅的形象，直立地站着。这是名为智人的动物，是人类的形象。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;总有一天，人类的子孙会遍布各个星球，到那时，他们要等到孩子长大，有足够的承受能力的时候，才会告诉他们远古的地球的历史；而他们在听说的时候，会因为死亡这样的事情竟然曾经存在过而悲伤流泪！
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;人类的形象变得比正午的太阳还要夺目，放射出的光芒令哈利的皮肤感到一阵温暖。哈利向死亡的阴影倾泄出了他全部的蔑视，打开了心中所有的闸门，让这个明亮的形象变得越来越耀眼，越来越耀眼。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;你不是不可战胜的，总有一天人类会终结你。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;如果我能，我会终结你，凭着智慧和魔法和科学的力量。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我不会在死亡的恐惧下颤抖，只要我还有胜利的机会。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我不会任凭死亡碰到我，不会任凭死亡碰到我爱的人们。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;即使你真的在我终结你之前终结了我，
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;也会有人代替我的位置，随后又会有人代替他们的位置，
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;直到世界的伤口最终被治愈……
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;面对死亡的不屈是哈利和伏地魔共有的特点。然而同理心的缺乏使得伏地魔只想逃避他自己的死亡，而哈利却想要为全人类终结死亡。对我来说，这段话就如同《永恒的终结》结尾，哈兰和诺羽决定终结永恒时空，为人类开启走向银河帝国的可能时&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;诺羽说道，“这就是地球。这里不仅仅属于永恒组员所有，而是全体人类唯一的故乡，但也是未来无穷冒险的唯一起点。你的任务，就是作出决定。这是你要作出的决定。你和我以及洞穴里头的物品，都会受到物理时间力场的保护，不会受到这次变革的影响。库柏将和那则广告一同消失；永恒时空和我的世纪，也都将一起终结。但我们会留下来，我们两人拥有孩子和孙子，而且人类总有一天能够在群星之间进行太空旅行。”
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;他转头看着她，而她则回以微笑。这是他一向熟悉的诺羽。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;他并不清楚自己是否已作出决定，直到那片亮白突然布满了整个天空。原本倚着天空的时空壶朦胧外形，现在已经全部消失。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;发现时空壶的消失，他便晓得了一切。诺羽缓缓地进入了他的怀抱，而且，永恒时空最后终于结束了。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;——但这同时也是无限时空的开启。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;																		 --- 《永恒的终结》 第十八章 无限时空的开启
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后值得一提的是，尽管作者当时是在互联网上连载这一小说，但是这本书却有着非常好的前后呼应和伏笔，这使得本书非常适合多次阅读，每次总能有新的发现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>POLAR&#43;&#43;: Active One-shot Personalized Article Recommendation</title>
      <link>https://zxdu.xyz/publication/tkde-19/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/tkde-19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sequential Scenario-Specific Meta Learner for Online Recommendation</title>
      <link>https://zxdu.xyz/publication/kdd-19/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/kdd-19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://zxdu.xyz/blog/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>POLAR: Attention-Based CNN for One-Shot Personalized Article Recommendation</title>
      <link>https://zxdu.xyz/publication/pkdd-18/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://zxdu.xyz/publication/pkdd-18/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
